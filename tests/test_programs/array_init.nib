var g_a : [_] int = {0, 1, [4] = 10}; // Should be array of 5 elements.
#static_assert(#length(g_a) == 5);
//var g_err := {1, 2}; // Cannot infer type

proc main() => int
{
    var a: [11] int = {0, [4] = 1, 2, [10] = 4};
    var b: [_] char = {0, 1, [3] = 10}; // [5]int
    #static_assert(#length(b) == 4);

    var now_allowed: [11] int = a; // Unlike C, Nibble allows copying arrays with '='
    #static_assert(#typeid(#typeof(now_allowed)) == #typeid([11]int));

    var small_cpy: [_] char = b; // Now allowed too. Small arrays are copied with registers.
    small_cpy[3] = 3;
    #static_assert(#length(small_cpy) == #length(b));

    var small_str: [_] char = "BEE";
    #static_assert(#length(small_str) == #length("BEE"));
    #static_assert(#length(small_str) == 4);

    small_str[1] = 'D'; // To prove that we're not modifying original string (would segfault).

    var large_str : [_] char = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    large_str[48] = 'B';

    var c : int = 5;

    // 4 + a[5] + 10 + 10 = 4 + 2 + 10 + 10 + 4 + 3 + (68 - 66) + (66 - 65) = 36
    return a[10] + a[c] + g_a[4] + b[3] + now_allowed[10] + small_cpy[3] + (small_str[1] - small_str[0]) + (large_str[48] - large_str[47]);
}

