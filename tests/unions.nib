
union Value {
    _u8: u8;
    _s8: s8;
    _u16: u16;
    _s16: s16;
    _u32: u32;
    _s32: s32;
    _u64: u64;
    _s64: s64;
}

#static_assert(#offsetof(Value, _u8) == 0);
#static_assert(#offsetof(Value, _s8) == 0);
#static_assert(#offsetof(Value, _u16) == 0);
#static_assert(#offsetof(Value, _s16) == 0);
#static_assert(#offsetof(Value, _u32) == 0);
#static_assert(#offsetof(Value, _s32) == 0);
#static_assert(#offsetof(Value, _u64) == 0);
#static_assert(#offsetof(Value, _s64) == 0);

#static_assert(#sizeof(Value) == #sizeof(s64));

var g_val : Value;
var g_val2 : Value = {_s8 = -5};

union UnionWithSlice {
    slice : []int;
    number : s64;
}

proc main() => int {
    var val : Value;
    var p_val : ^Value = ^val;
    p_val._s32 = 20;

    g_val._u64 = 10;

    var val2 : Value = {_s8 = 'A'};
    #static_assert(#typeid(#typeof(val2._u8)) == #typeid(u8));
    #static_assert(#typeid(#typeof(val2._s8)) == #typeid(s8));
    #static_assert(#typeid(#typeof(val2._u16)) == #typeid(u16));
    #static_assert(#typeid(#typeof(val2._s16)) == #typeid(s16));
    #static_assert(#typeid(#typeof(val2._u32)) == #typeid(u32));
    #static_assert(#typeid(#typeof(val2._s32)) == #typeid(s32));
    #static_assert(#typeid(#typeof(val2._u64)) == #typeid(u64));
    #static_assert(#typeid(#typeof(val2._s64)) == #typeid(s64));

    var arr : [16]int = {-31};
    var u_slice : UnionWithSlice = {slice = arr};

    // 40 + 65 + -5 + -31 = 69
    return g_val._u8 + g_val._u16 + p_val._s32 + val2._s8 + g_val2._s8 + u_slice.slice[0];
}
