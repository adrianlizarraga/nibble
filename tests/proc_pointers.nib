
proc add(a:int, b:int) => int {
    return a + b;
}

proc sub(a:int, b:int) => int {
    return a - b;
}

typedef BinaryProc = proc(int, int) => int;

var g_proc : BinaryProc = add;

proc get_a_proc(id:int) => BinaryProc {
    if (id) {
        return add;
    }
    else {
        return sub;
    }
}

typedef VariadicProc = proc(..int) => int;

proc add_variadic(nums : ..int) => int {
    var i : usize = 0;
    var result : int = 0;

    while (i < nums.size) {
        result = result + nums.data[i];

        i = i + 1;
    }

    return result;
}

proc main() => int {
    var p : proc(int, int) => int = add; 
    var p2 : BinaryProc = sub; 
    var p3 : VariadicProc = add_variadic;

    return p(1, 3) + p2(1, 3) + g_proc(1, 3) + get_a_proc(0)(1, 3) + p3(1,2,3); //4 + -2 + 4 + -2 + 6 = 10
}
