var g_f64 : f64 = 1.2;
var g_f32 : f32 = 1.2f;

// Test compile-time evaluation of floating-point values.
#static_assert(0.05 + 0.05 == 0.1);
#static_assert(0.05 - 0.05 == 0.0);
#static_assert(2.0 * 1.1 == 2.2);
#static_assert(10.0 / 2.0 == 5.0);
#static_assert(1.0 < 1.1);
#static_assert(1.1 > 1.0);
#static_assert(1.1 >= 1.1);
#static_assert(1.2 >= 1.1);
#static_assert(1.1 <= 1.1);
#static_assert(1.0 <= 1.1);
#static_assert((1.1 * 2) == 2.2);
#static_assert(2 == 2.0);
#static_assert((-1.4 :> int) == -1);

#static_assert(0.05f + 0.05f == 0.1f);
#static_assert(0.05f - 0.05f == 0.0f);
#static_assert(2.0f * 1.1f == 2.2f);
#static_assert(10.0f / 2.0f == 5.0f);
#static_assert(1.0f < 1.1f);
#static_assert(1.1f > 1.0f);
#static_assert(1.1f >= 1.1f);
#static_assert(1.2f >= 1.1f);
#static_assert(1.1f <= 1.1f);
#static_assert(1.0f <= 1.1f);
#static_assert((1.1f * 2) == 2.2f);
#static_assert(2 == 2.0f);
#static_assert((-1.4f :> int) == -1);

proc main() => int {
    var l_f32 : f32 = 1.8f;
    var l_f64 : f64 = 1.2;
    var l2_f32 : f32 = l_f32 + 1.1f;
    var l2_f64 : f64 = l_f64 + 1.1;

    var l_int : int = 2;
    var l_s64 : s64 = 3;
    var l3_f32 : f32 = l_int :> f32;
    var l3_f64 : f64 = (l_s64 + 1) :> f64;

    var l_u8 : u8 = 255;
    var l2_s8 : s8 = 100;
    var l4_f64 : f64 = l_u8 :> f64;
    var l4_f32 : f32 = ((l2_s8 + 1) :> s8) :> f32;

    var l5_f64 : f64 = l_f32 :> f64; // 1.8
    var l5_f32 : f32 = l_f64 :> f32; // 1.2f
    var l6_f64 : f64 = (l_f32 + 1.1f) :> f64; // 2.9
    var l6_f32 : f32 = (l_f64 + 1.1) :> f32; // 2.3f

    var l7_f32 : f32 = l_f32 - 0.7f; // 1.1f
    var l8_f32 : f32 = (l_f32 + 0.1f) - (l_f32 + 1.5f); // -1.4f
    var l7_f64 : f64 = l_f64 - 0.1; // 1.1
    var l8_f64 : f64 = (l_f64 + 0.5) - (l_f64 + 0.2); // 0.3

    var l9_f32 : f32 = l_f32 * 10.0f; // 18.0f
    var l10_f32 : f32 = (l_f32 * 10.0f) * (l_f32 - 1.3f); // 18.0f * 0.5f = 9.0f
    var l9_f64 : f64 = l_f64 * 13.0; // 15.6
    var l10_f64 : f64 = (l_f64 * 10.0) * (l_f64 - 0.7); // 12.0 * 0.5 = 6.0

    var l11_f32 : f32 = l_f32 / 0.1f; // 18.0f
    var l12_f32 : f32 = (l_f32 * 10.0f) / (l_f32 + 0.2f); // 18.0f / 2.0f = 9.0f
    var l11_f64 : f64 = l_f64 / 0.1; // 11.9999999998
    var l12_f64 : f64 = (l_f64 * 10.0) / (l_f64 + 0.8); // 12.0 / 2.0 = 6.0

    var x : int;

    if (l_f32 == 1.8f) { // True
        x = 20;
    }

    if (l_f32 > (-1.0f + l_f32)) { // True
        x += 10;
    }

    if (l_f64 >= 1.2) { // True
        x += 10;
    }

    if (l_f32 < 2.0f) { // True
        x += 10;
    }

    if (l_f32 <= 1.8f) { // True
        x += 10;
    }

    if (l_f64 != 1.2) { // False
        x += -20;
    }

    if (l_f32 > 1.8f) { // False
        x -= 10;
    }

    if (l_f32 >= 11.8f) { // False
        x -= 10;
    }

    if (l_f32 < -1.0f) { // False
        x -= 10;
    }

    if (l_f32 <= -1.8f) { // False
        x -= 10;
    }

    // 1 + 1 + 2 + 2 + 2 + 1 + 2 + 4 + 255 - 101 - 1 - 1 - 2 - 2 - 1 - (-1) + 1 + 0 - 18 - 9 - 15 + 6 - 18 - 9 + 11 - 6 - 60 = 46
    return (l_f64 :> u64) + (l_f32 :> u32) + (l2_f32 :> u32) + (l2_f64 :> u32) + ((g_f64 + 1.3) :> u8) + ((g_f32 + 0.3f) :> u16) + 
           (l3_f32 :> int) + (l3_f64 :> int) + (l4_f64 :> int) - (l4_f32 :> int) - (l5_f64 :> int) - (l5_f32 :> int) - (l6_f64 :> int) -
           (l6_f32 :> int) - (l7_f32 :> int) - (l8_f32 :> int) + (l7_f64 :> int) + (l8_f64 :> int) - (l9_f32 :> int) - (l10_f32 :> int) -
           (l9_f64 :> int) + (l10_f64 :> int) - (l11_f32 :> int) - (l12_f32 :> int) + (l11_f64 :> int) - (l12_f64 :> int) -
           x;
}
