//
// Public
//

@exported
enum PrintErr {
    NONE = 0,
    INVALID_ARG_INDEX,
    UNSUPPORTED_ARG_TYPE,
    MISSING_END_BRACE
}

@exported
enum FmtFlag {
    LEFT_JUSTIFIED = 1 << 0,
    FORCE_SIGN     = 1 << 1,
    SPACE_SIGN     = 1 << 2,
    HASH           = 1 << 3,
    ZERO_PAD       = 1 << 4,
    HAS_WIDTH      = 1 << 5,
    HAS_PRECISION  = 1 << 6,
    UPPERCASE      = 1 << 7
}

@exported
struct FmtInt {
    value : ssize;
    base : u32;
    flags : u32;
    precision : u32;
    width : u32;
}

@exported
struct FmtUInt {
    value : usize;
    base : u32;
    flags : u32;
    precision : u32;
    width : u32;
}

@exported
proc print_out(format : ^char, vargs : ..any) => {usize; PrintErr} {
    var buf : [128] char;
    var dst : FileBuffer = {buf = buf};

    return print_out_internal(output_to_file, ^dst, format, vargs);
}

//
// Internal
//

typedef PutCharProc = proc(^void, char) => bool;

struct FileBuffer {
    buf : []char;
    idx : s64;
}

struct WriteState {
    count : u64;
    arg : ^void;
    put_char : PutCharProc;
}

const PRINT_MAX_NUM_DIGITS : ssize = 32;

proc print_int(wstate: ^WriteState, value : ssize, base : u32, flags : u32, precision : u32, width : u32) {
    var is_neg : bool = value < 0;
    var u_value : usize;

    if (is_neg) {
        u_value = 0 - value;
    }
    else {
        u_value = value;
    }

    print_int_internal(wstate, u_value, base, is_neg, flags, precision, width);
}

proc print_uint(wstate : ^WriteState, value : usize, base : u32, flags : u32, precision : u32, width : u32)
{
    print_int_internal(wstate, value, base, false, flags, precision, width);
}

proc print_int_internal(wstate: ^WriteState, value : usize, base : u32, is_neg: bool, flags : u32, precision : u32, width : u32) {
    var tmp_buf : [PRINT_MAX_NUM_DIGITS]char = ---;

    var has_prec : bool = flags & FmtFlag::HAS_PRECISION;
    var has_width : bool = flags & FmtFlag::HAS_WIDTH;
    var print_sign : bool = is_neg || (flags & FmtFlag::FORCE_SIGN);
    var print_base : bool = (flags & FmtFlag::HASH) && ((base == 2) || (base == 8) || (base == 16));
    var left_justified : bool = flags & FmtFlag::LEFT_JUSTIFIED;
    var zero_padded : bool = flags & FmtFlag::ZERO_PAD;
    var uppercased : bool = flags & FmtFlag::UPPERCASE;

    if (has_prec && (precision == 0) && (value == 0)) {
        return;
    }

    // TODO: Ternary operator.
    var base_10_digit : char = ---;
    if (uppercased) {
        base_10_digit = 'A';
    }
    else {
        base_10_digit = 'a';
    }

    // Write the value into the temporary buffer in reverse order.
    var len : usize;

    do {
        var div_mod := value /% base; // (digit, next_value)
        var base_digit : char = ---;

        // TODO: Ternary operator.
        if (div_mod[1] >= 10) {
            base_digit = base_10_digit - 10;
        }
        else {
            base_digit = '0';
        }

        // TODO: Will overflow for large bases
        // Consider using an enum for bases
        tmp_buf[len] = base_digit + div_mod[1];

        len += 1;
        value = div_mod[0];
    } while ((value > 0) && (len < PRINT_MAX_NUM_DIGITS));

    // Pre-calculate padding sizes.
    var tot_len : usize = len;
    var zero_pad : usize;
    var space_pad : usize;

    if (has_prec && (precision > len)) {
        zero_pad = precision - len;
    }

    tot_len += zero_pad;

    if (print_base) {
        tot_len += 1;

        if (base != 8) {
            tot_len += 1;
        }
    }
    else if (print_sign) {
        tot_len += 1;
    }

    if (has_width && (width > tot_len)) {
        var pad : usize = width - tot_len;

        if (left_justified) {
            space_pad += pad;
        }
        else if (zero_padded) {
            zero_pad += pad;
        }
        else {
            space_pad += pad;
        }
    }

    // Print width space padding for right justified numbers
    if (!left_justified) {
        while (space_pad) {
            put_char_wrapper(wstate, ' ');
            space_pad -= 1;
        }
    }

    // Print base or sign.
    if (print_base) {
        put_char_wrapper(wstate, '0');

        if (base == 2) {
            put_char_wrapper(wstate, 'b');
        }
        else if (base == 16) {
            // TODO: Ternary operator.
            var c : char = ---;
            if (uppercased) {
                c = 'X';
            }
            else {
                c = 'x';
            }

            put_char_wrapper(wstate, c);
        }
    }
    else if (print_sign) {
        // TODO: Ternary operator.
        var c : char = ---;
        if (is_neg) {
            c = '-';
        }
        else {
            c = '+';
        }

        put_char_wrapper(wstate, c);
    }

    // Print zero padding.
    while (zero_pad) {
        put_char_wrapper(wstate, '0');
        zero_pad -= 1;
    }

    // Print digits (reversed in buffer).
    while (len) {
        len -= 1;
        put_char_wrapper(wstate, tmp_buf[len]);
    }

    // Print space padding for left justified numbers
    if (left_justified) {
        while (space_pad) {
            put_char_wrapper(wstate, ' ');
            space_pad -= 1;
        }
    }
}

proc print_arg(wstate : ^WriteState, arg : ^any) => PrintErr {
    if (arg.type == #typeid(FmtInt)) {
        var fmt_int : FmtInt = *(arg.ptr :> ^FmtInt);

        print_int(wstate, fmt_int.value, fmt_int.base, fmt_int.flags, fmt_int.precision, fmt_int.width);
    }
    else if (arg.type == #typeid(FmtUInt)) {
        var fmt_uint : FmtUInt = *(arg.ptr :> ^FmtUInt);

        print_uint(wstate, fmt_uint.value, fmt_uint.base, fmt_uint.flags, fmt_uint.precision, fmt_uint.width);
    }
    else if (arg.type == #typeid(u8)) {
        var val : usize = *(arg.ptr :> ^u8);

        print_uint(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid(s8)) {
        var val : ssize = *(arg.ptr :> ^s8);

        print_int(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid(u16)) {
        var val : usize = *(arg.ptr :> ^u16);

        print_uint(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid(s16)) {
        var val : ssize = *(arg.ptr :> ^s16);

        print_int(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid(u32)) {
        var val : usize = *(arg.ptr :> ^u32);

        print_uint(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid(s32)) {
        var val : ssize = *(arg.ptr :> ^s32);

        print_int(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid(u64)) {
        var val : usize = *(arg.ptr :> ^u64);

        print_uint(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid(s64)) {
        var val : ssize = *(arg.ptr :> ^s64);

        print_int(wstate, val, 10, 0, 0, 0);
    }
    else if (arg.type == #typeid([]char)) {
        var str : []char = *(arg.ptr :> ^[]char);

        for (var ii : usize = 0; ii < str.length; ii += 1) {
            put_char_wrapper(wstate, str[ii]);
        }
    }
    else {
        return PrintErr::UNSUPPORTED_ARG_TYPE;
    }

    // TODO: Add rtti to be able to print arrays and structs recursively.
    
    return PrintErr::NONE;
}

proc print_out_internal(put_char : PutCharProc, arg : ^void, format : ^char, args : []any) => {usize; PrintErr} {
    var write_state : WriteState = {arg = arg, put_char = put_char};
    var arg_idx := 0;
    var at := format;

    while (*at) {

        // Replacement field. Must have at least 1 character remaining in format string.
        if (*at == '{') {
            at = at + 1;

            // Escaped '{'.
            if (*at == '{') {
                put_char_wrapper(^write_state, *at);
                at = at + 1;
                continue;
            }

            // Get argument index.
            if (is_dec_digit(*at)) {
                arg_idx = scan_num(^at);
            }
            else {
                arg_idx = arg_idx + 1;
            }

            // Check if arg index is within bounds.
            if (arg_idx >= args.length) {
                return {write_state.count, PrintErr::INVALID_ARG_INDEX};
            }

            // Print argument.
            var err := print_arg(^write_state, ^args[arg_idx]);

            if (err != PrintErr::NONE) {
                return {write_state.count, err};
            }

            // Check for ending '}'.
            if (*at != '}') {
                return {write_state.count, PrintErr::MISSING_END_BRACE};
            }

            at = at + 1;
        }
        // Just print character.
        else {
            put_char_wrapper(^write_state, *at);
            at = at + 1;
        }
    }

    put_char_wrapper(^write_state, *at); // Write null-terminator to flush contents.

    return {write_state.count, PrintErr::NONE};
}

proc scan_num(at_ptr : ^^char) => usize {
    var num : usize = 0;

    while (is_dec_digit(**at_ptr)) {
        num = num * 10;
        num = num + (**at_ptr - '0');
        *at_ptr = *at_ptr + 1;
    }

    return num;
}

proc is_dec_digit(c : char) => bool {
    return (c >= '0') && (c <= '9');
}

proc put_char_wrapper(write_state : ^WriteState, c : char) => bool {
    var r : bool = true;

    if (write_state.put_char) {
        r = write_state.put_char(write_state.arg, c);
    }

    if (r && c) {
        write_state.count = write_state.count + 1;
    }

    return r;
}

proc output_to_file(data : ^void, c : char) => bool {
    var ret : bool = true;
    var dst : ^FileBuffer = data :> ^FileBuffer;
    var write_char := c;

    if (dst.idx < dst.buf.length) {
        if (write_char) {
            dst.buf[dst.idx] = c;
            dst.idx = dst.idx + 1;
        }
    }
    else {
        if (!flush_file_buffer(dst)) {
            return false;
        }

        if (write_char) {
            dst.buf[dst.idx] = c;
            dst.idx = dst.idx + 1;
        }
    }

    if (!c) {
        ret = flush_file_buffer(dst);
    }

    return ret;
}

proc flush_file_buffer(fb : ^FileBuffer) => bool {
    var n : s64 = #writeout(fb.buf, fb.idx);

    if (n == fb.idx) {
        fb.idx = 0;
        return true;
    }

    return false;
}

