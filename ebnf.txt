type_spec      = base_type_spec ('*' | '[' expr? ']')*
base_type_spec = IDENTIFIER
               | 'func' '(' param_type_spec_list? ')' (':' type_spec)?
               | '(' type_spec ')'

param_type_spec_list = param_type_spec (',' param_type_spec)*
param_type_spec = (IDENTIFIER :)? type_spec 
type_spec_spec = '(' ':' type_spec ')'

expr = ternary_expr
ternary_expr = or_expr ('?' ternary_expr ':' ternary_expr)?
or_expr      = and_expr (OR_OP and_expr)*                   // OR_OP = '||'
and_expr     = cmp_expr (AND_OP cmp_expr)*                  // AND_OP = '&&'
cmp_expr     = add_expr (CMP_OP add_expr)*                  // CMP_OP = ['==' '!=' '>' '>=' '<' '<=']
add_expr     = mul_expr (ADD_OP mul_expr)*                  // ADD_OP = [+-|^] 
mul_expr     = unary_expr (MUL_OP unary_expr)*              // MUL_OP = [*/%&] | '<<' | '>>'
unary_expr   = UNARY_OP unary_expr                          // UNARY_OP = [&*-+~!]
             | call_expr
call_expr    = base_expr ('.' IDENTIFIER | '[ expr ']' | '(' arg_list* ')')*
base_expr    = INT
             | FLOAT
             | STRING
             | IDENTIFIER
             | type_spec_spec? unary_expr
             | type_spec_spec? '{' init_list '}'
             | SIZEOF '(' (type_spec_spec | expr) ')'
             | '(' expr ')'

arg_list = arg_item (',' arg_item)*
arg_item = (IDENTIFIER '=') ? expr
init_list = init_item (',' init_item)*
init_item = (IDENTIFIER '=')? expr

decl = var_decl ';'
     | const_decl ';'
     | enum_decl
     | union_decl
     | struct_decl
     | func_decl
     | typedef_decl ';'

var_decl  = 'var' IDENTIFIER ':' type_spec? ('=' expr)?

const_decl  = 'const' IDENTIFIER ':' type_spec? '=' expr

enum_decl  = 'enum' IDENTIFIER '{' enum_items? '}'
enum_items = enum_item (',' enum_item)* ','?
enum_item  = IDENTIFIER ('=' expr)?

union_decl  = 'union' aggregate_decl_body
struct_decl = 'struct' aggregate_decl_body

aggregate_decl_body  = IDENTIFIER '{' aggregate_item* '}'
aggregate_decl_item  = identifier_list ':' type_spec ';'
identifier_list = IDENTIFIER (',' IDENTIFIER)*

func_decl  = 'func' IDENTIFIER '(' param_list ')' (':' type_spec)? stmt_block
param_list = param_item (',' param_item)*
param_item = IDENTIFIER ':' type_spec 

typedef_decl = 'typedef' IDENTIFIER '=' type_spec


stmt = 'if' '(' expr ')' stmt_block ('elif' '(' expr ')' stmt_block)* ('else' stmt_block)?
     | 'while' '(' expr ')' stmt_block
     | 'do' stmt_block 'while' '(' expr ')' ';'
     | 'for' '(' (var_decl | expr | expr_assign)? ';' expr? ';' (expr | expr_assign)? ')' stmt_block
     | 'switch' '(' expr ')' '{' case_item* '}' 
     | 'return' expr? ';'
     | 'break' IDENTIFIER? ';' 
     | 'continue' IDENTIFIER? ';'
     | 'goto' IDENTIFIER ';'
     | IDENTIFIER ':'
     | expr ';'
     | expr_assign ';'
     | decl
     | stmt_block

expr_assign = expr ASSIGN_OP expr      // ASSIGN_OP = ['=' '+=' '-=' '*=' '/=' '^=' '%=']
stmt_block = '{' stmt* '}'
case_item = (case_item_range | 'default') ':' stmt*      // TODO: Consider implicit 'break' and explicit 'fallthrough'
case_item_range = 'case' expr ('...' expr)?

