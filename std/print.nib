//
// Public
//

@exported
enum PrintErr {
    NONE = 0,
    INVALID_ARG_INDEX
}

@exported
proc print_out(format : [] char, vargs : ..any) => {usize; PrintErr} {
    var buf : [128] char;
    var dst : FileBuffer = {buf = buf};

    return print_out_internal(output_to_file, ^dst, format, vargs);
}

//
// Internal
//

struct FileBuffer {
    buf : []char;
    idx : s64;
}

struct PrintState {
    count : u64;
    arg : ^void;
    put_char : PutCharProc;
}

typedef PutCharProc = proc(^void, char) => bool;

proc print_out_internal(put_char : PutCharProc, arg : ^void, format : []char, args : []any) => {usize; PrintErr} {
    var state : PrintState = {arg = arg, put_char = put_char};

    for (var i := 0; i < format.length; ) {
        var c := format[i];

        if (c == '%') {
            i = i + 1;

            var r := scan_num(format, i);
            var arg_index := r.[0];

            if (arg_index >= args.length) {
                var ret : struct {usize; PrintErr;} = {state.count, PrintErr::INVALID_ARG_INDEX};
                return ret;
            }

            var a := ^args[arg_index];

            if (a.type == #typeid(int)) {
                var t_buf : [32]char;
                var val : int = *(a.ptr :> ^int);
                var j : int;

                do {
                    var div_mod := val /% 10;

                    t_buf[j] = '0' + div_mod[1];

                    val = div_mod[0];
                    j = j + 1;
                } while (val);

                while (j) {
                    put_char_wrapper(^state, t_buf[j - 1]);
                    j = j - 1;
                }
            }

            i = r.[1];
        }
        else {
            put_char_wrapper(^state, c);
            i = i + 1;
        }
    }

    return {state.count, PrintErr::NONE};
}

proc scan_num(format : []char, i : usize) => {usize; usize} {
    var num : usize = 0;

    while (i < format.length && is_num(format[i])) {
        num = num * 10;
        num = num + (format[i] - '0');
        i = i + 1;
    }

    return {num, i};
}

proc is_num(c : char) => bool {
    return (c >= '0') && (c <= '9');
}

proc put_char_wrapper(state : ^PrintState, c : char) => bool {
    var r : bool = 1;

    if (state.put_char) {
        r = state.put_char(state.arg, c);
    }

    if (r && c) {
        state.count = state.count + 1;
    }

    return r;
}

proc output_to_file(data : ^void, c : char) => bool {
    var ret : bool = 1;
    var dst : ^FileBuffer = data :> ^FileBuffer;
    var write_char := c;

    if (dst.idx < dst.buf.length) {
        if (write_char) {
            dst.buf[dst.idx] = c;
            dst.idx = dst.idx + 1;
        }
    }
    else {
        if (!flush_file_buffer(dst)) {
            return 0;
        }

        if (write_char) {
            dst.buf[dst.idx] = c;
            dst.idx = dst.idx + 1;
        }
    }

    if (!c) {
        ret = flush_file_buffer(dst);
    }

    return ret;
}

proc flush_file_buffer(fb : ^FileBuffer) => bool {
    var n : s64 = #writeout(fb.buf, fb.idx);

    if (n == fb.idx) {
        fb.idx = 0;
        return 1;
    }

    return 0;
}

