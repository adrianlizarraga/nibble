typespec       = typespec_ref
typespec_ref   = ('^' | '[' expr? ']' | KW_CONST) typespec_ref
               | typespec_base
typespec_base  = typespec_proc
               | typespec_anon_struct
               | typespec_anon_union
               | TKN_IDENT
               | '(' type_spec ')'

typespec_proc = 'proc' '(' typespec_proc_param_list? ')' ('=>' typespec)?
typespec_proc_param_list = typespec_proc_param (',' typespec_proc_param)*
typespec_proc_param = typespec 

typespec_anon_struct = 'struct' '{' decl_aggregate_item* '}'
typespec_anon_union = 'union' '{' decl_aggregate_item* '}'

expr = expr_ternary
expr_ternary  = expr_or ('?' expr_ternary ':' expr_ternary)?
expr_or       = expr_and (OR_OP expr_and)*                   // OR_OP = '||'
expr_and      = expr_cmp (AND_OP expr_cmp)*                  // AND_OP = '&&'
expr_cmp      = expr_add (CMP_OP expr_add)*                  // CMP_OP = ['==' '!=' '>' '>=' '<' '<=']
expr_add      = expr_mul (ADD_OP expr_mul)*                  // ADD_OP = [+-|^] 
expr_mul      = expr_unary (MUL_OP expr_unary)*              // MUL_OP = [*/%&] | '<<' | '>>'
expr_unary    = UNARY_OP expr_unary                          // UNARY_OP = [^*-+~!]
              | expr_base_mod
expr_base_mod = expr_base ('.' TKN_IDENT | '[ expr ']' | '(' expr_call_arg_list* ')' | ':>' typespec)*
expr_base     = TKN_INT
              | TKN_FLOAT
              | TKN_STR
              | TKN_IDENT
              | expr_compound_lit
              | expr_sizeof
              | expr_typeof
              | '(' expr ')'

expr_call_arg_list = expr_call_arg (',' expr_call_arg)*
expr_call_arg = (TKN_IDENT '=') ? expr
expr_compound_lit = '{' expr_init_list (':' typespec)?'}'
expr_init_list = expr_init_item (',' expr_init_item)*
expr_init_item = (TKN_IDENT '=')? expr
               | ('[' (TKN_INT | TKN_IDENT) ']' '=')? expr
expr_sizeof = '#' KW_SIZEOF '('type_spec')'
expr_typeof = '#' KW_TYPEOF '(' expr ')'

decl = '#' decl_const
     | '#' decl_typedef
     | decl_enum
     | decl_union
     | decl_struct
     | decl_proc
     | decl_var

decl_var   = TKN_IDENT ':' type_spec? ('=' expr)? ';'
decl_const = '#' KW_CONST TKN_IDENT ':' typespec?  '=' expr ';'

decl_enum  = 'enum' TKN_IDENT (':' typespec)? '{' decl_enum_items? '}'
decl_enum_items = decl_enum_item (',' decl_enum_item)* ','?
decl_enum_item  = TKN_IDENT ('=' expr)?

decl_union  = 'union' decl_aggregate_body
decl_struct = 'struct' decl_aggregate_body

decl_aggregate_body  = TKN_IDENT '{' decl_aggregate_field* '}'
decl_aggregate_field = TKN_IDENT ':' type_spec ';'

decl_proc  = 'proc' TKN_IDENT '(' param_list ')' (':' type_spec)? stmt_block
param_list = param_item (',' param_item)*
param_item = TKN_IDENT ':' type_spec 

decl_typedef = 'typedef' TKN_IDENT '=' type_spec ';'


stmt = 'if' '(' expr ')' stmt_block ('elif' '(' expr ')' stmt_block)* ('else' stmt_block)?
     | 'while' '(' expr ')' stmt_block
     | 'do' stmt_block 'while' '(' expr ')' ';'
     | 'for' '(' (decl_var | expr | expr_assign)? ';' expr? ';' (expr | expr_assign)? ')' stmt_block
     | 'switch' '(' expr ')' '{' case_item* '}' 
     | 'return' expr? ';'
     | 'break' TKN_IDENT? ';' 
     | 'continue' TKN_IDENT? ';'
     | 'goto' TKN_IDENT ';'
     | 'label' TKN_IDENT ':'
     | expr ';'
     | expr_assign ';'
     | decl
     | stmt_block

expr_assign = expr ASSIGN_OP expr      // ASSIGN_OP = ['=' '+=' '-=' '*=' '/=' '^=' '%=']
stmt_block = '{' stmt* '}'
case_item = (case_item_range | 'default') ':' stmt*      // TODO: Consider implicit 'break' and explicit 'fallthrough'
case_item_range = 'case' expr ('...' expr)?

