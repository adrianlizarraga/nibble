const ROWS : u32 = 20;
const COLS : u32 = 30;
const BUF_LEN : u32 = ROWS * (COLS + 1);

const SYS_read  : ssize = 0;
const SYS_fcntl : ssize = 72;
const SYS_clock_gettime : ssize = 228;
const SYS_clock_nanosleep : ssize = 230;

const STDIN : s32 = 0;

const F_SETFL : s32 = 4;
const F_GETFL : s32 = 3;
const O_NONBLOCK : s32 = 2048;
const EAGAIN : ssize = 11;
const CLOCK_MONOTONIC : ssize = 1;

proc read(fd : s32, buf : ^void, count : usize) => ssize {
    return #syscall3(SYS_read, fd, (buf :> ssize), (count :> ssize));
}

proc fcntl(fd : s32, cmd : s32, arg: s32) => s32 {
    return #syscall3(SYS_fcntl, fd, cmd, arg);
}

struct timespec {
    tv_sec : s64;
    tv_nsec : s64;
}

proc time_diff(result: ^timespec, start : ^timespec, end : ^timespec) {
    // NOTE: Requires end >= start!

    if (end.tv_nsec < start.tv_nsec) {
        result.tv_nsec = (1000000000 + end.tv_nsec) - start.tv_nsec; // Borrow a second (1e9 ns) from end.tv_sec
        result.tv_sec = (end.tv_sec - 1) - start.tv_sec;
    }
    else {
        result.tv_nsec = end.tv_nsec - start.tv_nsec;
        result.tv_sec = end.tv_sec - start.tv_sec;
    }
}

proc clock_nanosleep(clockid: ssize, flags : s32, request : ^timespec, remain: ^timespec) => s32 {
    return #syscall4(SYS_clock_nanosleep, clockid, flags, (request :> ssize), (remain :> ssize));
}

proc clock_gettime(clockid: ssize, tp : ^timespec) => s32 {
    return #syscall2(SYS_clock_gettime, clockid, (tp :> ssize));
}

// Print integer into the provided dst buffer and return the number of digits.
proc print_int(val : s32, dst : []char) => s32 {
    if (dst.length == 0) {
        return 0;
    }

    var j : s32 = 0;

    do {
        var digit := val % 10;

        dst[j] = '0' + digit;

        val = val / 10;
        j = j + 1;
    } while (val && j < dst.length);

    if (j >= dst.length && val != 0) {
        return -1;
    }

    // Reverse in-place.
    for (var i : s32 = 0; i < (j / 2); i += 1) {
        var k := j - i - 1;
        var tmp := dst[k];
        dst[k] = dst[i];
        dst[i] = tmp;
    }
    
    return j;
}

// Euclidean modulo. 'b' must be positive. 'a' can be positive or negative.
proc emod(a : s32, b : s32) => s32 {
    var m := a % b;
    return (a < 0) ? (m + b) % b : m;
}

enum Entity : char {
    EMPTY = '.',
    NEWLINE = '\n',
    PLAYER_BODY = '#',
    PLAYER_HEAD = '@',
}

enum Dir : u8 {
    UP,
    DOWN,
    LEFT,
    RIGHT
}

struct Position {
    x: u32;
    y: u32;
}

proc snake_move(pos : ^Position, dir : Dir) {
    if (dir == Dir::UP) {
        pos.y = emod(pos.y - 1, ROWS);
    }
    else if (dir == Dir::DOWN) {
        pos.y = emod(pos.y + 1, ROWS);
    }
    else if (dir == Dir::LEFT) {
        pos.x = emod(pos.x - 1, COLS);
    }
    else if (dir == Dir::RIGHT) {
        pos.x = emod(pos.x + 1, COLS);
    }
}

proc display(screen_buf : ^[BUF_LEN]Entity, head_pos : ^Position) {
    for (var r : u32 = 0; r < ROWS; r += 1) {
        var row_start := r * (COLS + 1);

        for (var c : u32 = 0; c < COLS; c += 1) {
            var i := row_start + c;

            if ((r == head_pos.y) && (c == head_pos.x)) {
                (*screen_buf)[i] = Entity::PLAYER_HEAD;
            }
            else {
                (*screen_buf)[i] = Entity::EMPTY;
            }
        }

        (*screen_buf)[row_start + COLS] = Entity::NEWLINE;
    }

    #writeout(*screen_buf, BUF_LEN * #sizeof(Entity));
}

proc get_term_reset_cmd(dst: []char, rows : u32, cols : u32) => s32 {
    // Write command to move cursor up 'ROWS' number of units and then left 'COLS' number of units.
    // Cursor up: "<ESC>[{ROWS}A"
    // Cursor backwards: "<ESC>[{COLS}D"

    var len : s32;

    if (dst.length <= 8) {
        return -1;
    }

    dst.data[0] = '\x1B'; // This is the ESC character.
    dst.data[1] = '[';
    len += 2;

    var rows_dst : []char = {data = dst.data + len, length = dst.length - len};
    var rows_len := print_int(rows, rows_dst);

    if (rows_len < 0) {
        return -1;
    }

    len += rows_len;

    if (len >= dst.length - 3) {
        return -1;
    }

    dst.data[len] = 'A';
    dst.data[len + 1] = '\x1B';
    dst.data[len + 2] = '[';
    len += 3;

    var cols_dst : []char = {data = dst.data + len, length = dst.length - len};
    var cols_len := print_int(cols, cols_dst);

    if (cols_len < 0) {
        return -1;
    }

    len += cols_len;

    if (len >= dst.length) {
        return -1;
    }

    dst.data[len] = 'D';
    len += 1;

    return len;
}

// Must disable terminal canonical mode (dont' wait for <ENTER> on input read) and echo:
// stty -icanon -echo
proc main() => int {
    var screen_buf : [BUF_LEN]Entity = ---;
    var quit : bool;

    var head_pos : Position = {COLS/2, ROWS/2};
    var head_dir : Dir = Dir::UP;

    // Command to reset cursor position using terminal control escape sequences.
    // Cursor up: <ESC>[{ROWS}A
    // Cursor backwards: <ESC>[{COLS}D
    var term_reset_cmd : [6*2 + 32*2]char = ---;
    var term_reset_cmd_len : s32 = get_term_reset_cmd(term_reset_cmd, ROWS, COLS);

    if (term_reset_cmd_len < 0) {
        return 1;
    }

    #writeout("\n\n", 2);

    // Make STDIN non-blocking.
    fcntl(STDIN, F_SETFL, fcntl(STDIN, F_GETFL, 0) | O_NONBLOCK);

    var start_time : timespec;
    var end_time : timespec;
    var target_frame_time : timespec = {0, 33300000}; // 33.3 ms
    var frame_count : u32;
    const frames_per_unit_move : u32 = 5;

    while (!quit) {
        // Get frame start time.
        if (clock_gettime(CLOCK_MONOTONIC, ^start_time) < 0) {
            return 1;
        }

        // Display the level.
        display(^screen_buf, ^head_pos);

        // Read user command from stdin.
        var cmd : char;
        var num_read := read(STDIN, ^cmd, 1);

        if (num_read == 1) {
            if (cmd == 'q') {
                quit = true;
            }
            else if (cmd == 'w') {
                head_dir = Dir::UP;
            }
            else if (cmd == 'a') {
                head_dir = Dir::LEFT;
            }
            else if (cmd == 's') {
                head_dir = Dir::DOWN;
            }
            else if (cmd == 'd') {
                head_dir = Dir::RIGHT;
            }
        }
        else if (num_read != -EAGAIN) {
            return 1;
        }

        // Move the snake one unit every 'few' frames.
        if (frame_count == frames_per_unit_move - 1) {
            snake_move(^head_pos, head_dir);
            frame_count = 0;
        }
        else {
            frame_count += 1;
        }

        // Reset cursor using terminal control escape sequences.
        #writeout(term_reset_cmd, term_reset_cmd_len);

        // Get frame end time
        if (clock_gettime(CLOCK_MONOTONIC, ^end_time) < 0) {
            return 1;
        }

        var elapsed_time : timespec = ---;
        time_diff(^elapsed_time, ^start_time, ^end_time);

        // Sleep until we've hit the target frame time.
        while ((elapsed_time.tv_sec == 0) && (elapsed_time.tv_nsec < target_frame_time.tv_nsec)) {
            // Try to sleep for the amount of time remaining.
            var sleep_time : timespec = ---;
            time_diff(^sleep_time, ^elapsed_time, ^target_frame_time); // sleep_time = target_frame_time - elapsed_time
            clock_nanosleep(CLOCK_MONOTONIC, 0, ^sleep_time, null);

            // Check how much time has elapsed since the start of the frame once more.
            // This sleep loop will continue until we've hit our frame time.
            if (clock_gettime(CLOCK_MONOTONIC, ^end_time) < 0) {
                return 1;
            }

            time_diff(^elapsed_time, ^start_time, ^end_time);
        }
    }

    return 0;
}
