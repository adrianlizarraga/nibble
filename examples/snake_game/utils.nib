// Print integer into the provided dst buffer and return the number of digits.
proc print_int(val : s32, dst : []char) => s32 {
    if (dst.length == 0) {
        return 0;
    }

    var j : s32 = 0;

    do {
        var digit := val % 10;

        dst[j] = '0' + digit;

        val = val / 10;
        j = j + 1;
    } while (val && j < dst.length);

    if (j >= dst.length && val != 0) {
        return -1;
    }

    // Reverse in-place.
    for (var i : s32 = 0; i < (j / 2); i += 1) {
        var k := j - i - 1;
        var tmp := dst[k];
        dst[k] = dst[i];
        dst[i] = tmp;
    }
    
    return j;
}

// Euclidean modulo. 'b' must be positive. 'a' can be positive or negative.
proc emod(a : s32, b : s32) => s32 {
    var m := a % b;
    return (a < 0) ? (m + b) % b : m;
}

// TODO: Need language support for macros
proc min_u32(a : u32, b : u32) => u32 {
    return a <= b ? a : b;
}
