//
// Public
//

@exported
enum PrintErr {
    NONE = 0,
    INVALID_ARG_INDEX,
    UNSUPPORTED_ARG_TYPE,
    MISSING_END_BRACE
}

@exported
proc print_out(format : ^char, vargs : ..any) => {usize; PrintErr} {
    var buf : [128] char;
    var dst : FileBuffer = {buf = buf};

    return print_out_internal(output_to_file, ^dst, format, vargs);
}

//
// Internal
//

typedef PutCharProc = proc(^void, char) => bool;

struct FileBuffer {
    buf : []char;
    idx : s64;
}

struct WriteState {
    count : u64;
    arg : ^void;
    put_char : PutCharProc;
}

proc print_out_internal(put_char : PutCharProc, arg : ^void, format : ^char, args : []any) => {usize; PrintErr} {
    var write_state : WriteState = {arg = arg, put_char = put_char};
    var arg_idx := 0;
    var at := format;

    while (*at) {

        // Replacement field. Must have at least 1 character remaining in format string.
        if (*at == '{') {
            at = at + 1;

            // Escaped '{'.
            if (*at == '{') {
                put_char_wrapper(^write_state, *at);
                at = at + 1;
                continue;
            }

            // Get argument index.
            if (is_dec_digit(*at)) {
                arg_idx = scan_num(^at);
            }
            else {
                arg_idx = arg_idx + 1;
            }

            // Check if arg index is within bounds.
            if (arg_idx >= args.length) {
                return {write_state.count, PrintErr::INVALID_ARG_INDEX};
            }

            // Get options.
            var options : FormatOptions;

            if (*at  == ':') {
                at = at + 1;
                options = scan_options(^at);
            }

            var a := ^args[arg_idx];

            if (a.type == #typeid(int)) {
                var t_buf : [32]char;
                var val : int = *(a.ptr :> ^int);
                var j : int;

                do {
                    var div_mod := val /% 10;

                    t_buf[j] = '0' + div_mod[1];
                    val = div_mod[0];
                    j = j + 1;
                } while (val);

                while (j) {
                    put_char_wrapper(^write_state, t_buf[j - 1]);
                    j = j - 1;
                }
            }
            else {
                return {write_state.count, PrintErr::UNSUPPORTED_ARG_TYPE};
            }

            // Check for ending '}'.
            if (*at != '}') {
                return {write_state.count, PrintErr::MISSING_END_BRACE};
            }

            at = at + 1;
        }
        // Just print character.
        else {
            put_char_wrapper(^write_state, *at);
            at = at + 1;
        }
    }

    put_char_wrapper(^write_state, *at); // Write null-terminator to flush contents.

    return {write_state.count, PrintErr::NONE};
}

enum FormatFlag {
    LEFT_JUSTIFIED = 1 << 0,
    FORCE_SIGN     = 1 << 1,
    SPACE_SIGN     = 1 << 2,
    HASH           = 1 << 3,
    ZERO_PAD       = 1 << 4,
    HAS_WIDTH          = 1 << 5,
    HAS_PRECISION      = 1 << 6,
    UPPERCASE      = 1 << 7
}

struct FormatOptions {
    flags : u32;
    precision : u32;
    width : u32;
}

proc scan_options(at_ptr : ^^char) => FormatOptions {
    var options : FormatOptions;
    var parsing : bool = 1;

    // Parse flags.
    while (parsing) {
        if (**at_ptr == '-') {
            options.flags |= FormatFlag::LEFT_JUSTIFIED;
            *at_ptr = *at_ptr + 1;
        }
        else if (**at_ptr == '+') {
            options.flags |= FormatFlag::FORCE_SIGN;
            *at_ptr = *at_ptr + 1;
        }
        else if (**at_ptr == ' ') {
            options.flags |= FormatFlag::SPACE_SIGN;
            *at_ptr = *at_ptr + 1;
        }
        else if (**at_ptr == '#') {
            options.flags |= FormatFlag::HASH;
            *at_ptr = *at_ptr + 1;
        }
        else if (**at_ptr == '0') {
            options.flags |= FormatFlag::ZERO_PAD;
            *at_ptr = *at_ptr + 1;
        }
        else {
            parsing = 0;
        }
    }

    // Parse width.
    if (is_dec_digit(**at_ptr)) {
        options.width = scan_num(at_ptr);
        options.flags |= FormatFlag::HAS_WIDTH;
    }

    // Parse precision.
    if (**at_ptr == '.') {
        *at_ptr = *at_ptr + 1;
        options.flags |= FormatFlag::HAS_PRECISION;

        if (is_dec_digit(**at_ptr)) {
            options.precision = scan_num(at_ptr);
        }
    }

    return options;
}

proc scan_num(at_ptr : ^^char) => usize {
    var num : usize = 0;

    while (is_dec_digit(**at_ptr)) {
        num = num * 10;
        num = num + (**at_ptr - '0');
        *at_ptr = *at_ptr + 1;
    }

    return num;
}

proc is_dec_digit(c : char) => bool {
    return (c >= '0') && (c <= '9');
}

proc put_char_wrapper(write_state : ^WriteState, c : char) => bool {
    var r : bool = 1;

    if (write_state.put_char) {
        r = write_state.put_char(write_state.arg, c);
    }

    if (r && c) {
        write_state.count = write_state.count + 1;
    }

    return r;
}

proc output_to_file(data : ^void, c : char) => bool {
    var ret : bool = 1;
    var dst : ^FileBuffer = data :> ^FileBuffer;
    var write_char := c;

    if (dst.idx < dst.buf.length) {
        if (write_char) {
            dst.buf[dst.idx] = c;
            dst.idx = dst.idx + 1;
        }
    }
    else {
        if (!flush_file_buffer(dst)) {
            return 0;
        }

        if (write_char) {
            dst.buf[dst.idx] = c;
            dst.idx = dst.idx + 1;
        }
    }

    if (!c) {
        ret = flush_file_buffer(dst);
    }

    return ret;
}

proc flush_file_buffer(fb : ^FileBuffer) => bool {
    var n : s64 = #writeout(fb.buf, fb.idx);

    if (n == fb.idx) {
        fb.idx = 0;
        return 1;
    }

    return 0;
}

