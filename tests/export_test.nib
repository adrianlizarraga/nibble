import { len,
         CSTR_CONST, CSTR_CONST as CONST20, // Can import twice using different names!
         get_rand as rand } from "./cstring_export.nib";

import { cstr_var, cstr_var as var2 } from "./cstring_export.nib";

// This is a var defined two modules down. It is renamed via an export statement, and then
// renamed again via the import statement.
import { g_nested_renamed as g_nested_dbl_renamed, NestedMod } from "./cstring_export.nib" as CString;

//import { _internal_var } from "./cstring_export.nib"; // Cannot import private symbols!
//import { nonexisting_var } from "./cstring_export.nib"; // Cannot import nonexisting symbols!
//import { g_nested_var } from "./cstring_export.nib"; // Must use the exported name! Cannot just use the original sym name.

proc main(argc : int, argv : ^^char) => int
{
    var a : ^char = "Hello\n";
    var num_chars := len(a);

    #writeout(a, num_chars);

    return num_chars + CSTR_CONST + CONST20 + cstr_var + var2 + rand(4) - CString::g_nested_dbl_renamed - CString::NestedMod::g_nested_var;
}

