#include "./float_utils.nib";


enum F64StringFlags {
    IS_NEG = 1 << 0,
    IS_INF = 1 << 1,
    IS_NAN = 1 << 2,
}

struct F64String {
    digits : [1024] char;
    num_digits : u32;
    decimal_point : s32; // Location of the decimal point (left of corresponding digit index).
    flags : u32;
}

proc max_u32(a : u32, b : u32) => u32 {
    return a > b ? a : b;
}

proc min_u32(a : u32, b : u32) => u32 {
    return a < b ? a : b;
}

proc f64str_num_frac_digits(fstr : ^F64String) => u32
{
    var tmp : s32 = (fstr.num_digits :> s32) - fstr.decimal_point;

    return tmp < 0 ? 0 : (tmp :> u32);
}

proc f64str_num_int_digits(fstr : ^F64String) => u32
{
    return fstr.decimal_point < 0 ? 0 : (fstr.decimal_point :> u32);
}

proc f64str_has_nonzero_digit(fstr : ^F64String, round_digit : u32) => bool {
    var start : u32 = round_digit + 1;

    for (var i := start; i < fstr.num_digits; i += 1) {
        if (fstr.digits[i] > '0' && fstr.digits[i] <= '9') {
            return true;
        }
    }

    return false;
}

// Adapted from https://research.swtch.com/ftoa
proc f64_to_str(dst : ^F64String, f : f64) {
    dst.num_digits = 0;
    dst.decimal_point = 0;
    dst.flags = 0;

    var fbits : F64Bits = {f = f};

    // Handle negative values.
    if (fbits.i >> 63) {
        fbits.i ^= F64_SIGN_MASK; // Make positive.
        dst.flags |= F64StringFlags::IS_NEG;
    }

    // Handle zero
    if (!fbits.i) {
        dst.num_digits = 1;
        dst.digits[0] = '0';
        dst.decimal_point = 1;

        return;
    }

    var biased_exp : s32 = (fbits.i & F64_EXP_MASK) >> F64_EXP_POS;
    var fraction : u64 = (fbits.i & F64_FRAC_MASK);

    // Handle infinity: exponent = 0x7FF, fraction = 0.
    // Handle NaNs: exponent = 0x7FF, fraction != 0.
    if (biased_exp == 0x7FF) {
        dst.flags |= (fraction != 0 ? F64StringFlags::IS_NAN : F64StringFlags::IS_INF);
        return;
    }

    var fp : CustomFP = custom_fp_norm(custom_fp_from_f64(fbits.f));

    // Convert significand to a string (itoa)
    {
        var tmp_buf : [PRINT_MAX_NUM_DIGITS] char = ---;
        var len : s32 = 0;
        var value : u64 = fp.f;

        // Write digits into tmp_buf in reverse order.
        do {
            tmp_buf[len] = '0' + ((value % 10) :> char);

            len += 1;
            value = value / 10;
        } while (value > 0);

        // Copy into dst buffer in the correct order.
        for (var i := len - 1; i >= 0; i -= 1) {
            dst.digits[dst.num_digits] = tmp_buf[i];
            dst.num_digits += 1;
        }
    }

    // Multiply significand by 2 "e" times.
    var e : s32 = fp.e;

    for (; e > 0; e -= 1) {
        var add_digit : bool = dst.digits[0] >= '5';
        var carry : char = 0;

        for (var i := dst.num_digits; i > 0;) {
            i -= 1;

            var x : s32 = carry + 2 * (dst.digits[i] - '0');
            var x_divmod_10 := x /% 10;

            carry = x_divmod_10[0]; // x / 10
            dst.digits[i + add_digit] = x_divmod_10[1] + '0'; // (x % 10) + '0'
        }

        if (add_digit) {
            dst.digits[0] = '1';
            dst.num_digits += 1;
        }
    }

    dst.decimal_point = dst.num_digits;

    // Divide significand by 2 "e" times.
    for (; e < 0; e += 1) {
        // If the last digit is odd, add a new digit for the .5
        if (dst.digits[dst.num_digits - 1] % 2 != 0) {
            dst.digits[dst.num_digits] = '0';
            dst.num_digits += 1;
        }

        var read_delta : s32 = 0;
        var prev_rem : char = 0;

        // Just like when dividing by hand, if the first (left-most) digit is less than 2,
        // then we have to consider the first two digits together.
        if (dst.digits[0] < '2') {
            read_delta = 1;
            prev_rem = dst.digits[0] - '0';
            dst.num_digits -= 1;
            dst.decimal_point -= 1;
        }

        // Divide by 2 (left to right).
        // 'prev_rem' is the remainder of the previous step.
        for (var i : u32 = 0; i < dst.num_digits; i += 1) {
            var x : s32 = (prev_rem * 10) + (dst.digits[i + read_delta] - '0');
            var x_divmod_2 := x /% 2;

            dst.digits[i] = x_divmod_2[0] + '0';
            prev_rem = x_divmod_2[1];
        }
    }

    dst.digits[dst.num_digits] = '\0';
}

proc f64str_round(fstr : ^F64String, precision : u32) {
    const digits_cap : u32 = #length(fstr.digits);
    var tot_frac_digits : u32 = f64str_num_frac_digits(fstr);

    // Location of the first fractional digit to be discarded and used for rounding.
    var round_digit : s32 = fstr.decimal_point + precision;

    // Precision is too low, and thus, this procedure discards all non-zero digits after the decimal point.
    // Sets digits array to 0.00...0 (precision determines the number of digits after decimal point)
    if (round_digit < 0) {
        fstr.num_digits = min_u32(precision + 1, digits_cap - 1);
        fstr.decimal_point = 1;

        #memset(fstr.digits, '0', fstr.num_digits);
    }
    else if (tot_frac_digits > 0 && (round_digit :> u32) < fstr.num_digits) {
        if (tot_frac_digits > precision) {
            // Round if the "round_digit" is greater than '5', OR
            // The "round_digit" is '5' and either the previous digit is odd or have any non-zero digit after
            // the round_digit.
            if ((fstr.digits[round_digit] > '5') ||
                ((fstr.digits[round_digit] == '5') &&
                 ((fstr.digits[round_digit - 1] % 2 == 1) || f64str_has_nonzero_digit(fstr, round_digit :> u32)))) {
                var i : s32 = round_digit - 1;

                // Convert nines to zero
                while (i >= 0 && fstr.digits[i] == '9') {
                    fstr.digits[i] = '0';
                    i -= 1;
                }

                if (i >= 0) {
                    fstr.digits[i] += 1; // Round up
                }
                else {
                    // Ex: 999.996 (prec of 2) => 1000.00
                    fstr.digits[0] = '1';
                    fstr.digits[round_digit] = '0';
                    fstr.decimal_point += 1;
                    fstr.num_digits += 1;
                }
            }

            // Decrease the number of digits by the number of discarded digits due to rounding.
            fstr.num_digits -= (tot_frac_digits - precision);
        }
        else if (tot_frac_digits < precision) {
            // Pad with '0' until the number of fractional digits equals the precision.
            while (tot_frac_digits < precision && (fstr.num_digits < digits_cap)) {
                fstr.digits[fstr.num_digits] = '0';
                fstr.num_digits += 1;
                tot_frac_digits += 1;
            }
        }
    }

    fstr.digits[fstr.num_digits] = '\0'; // Null terminate
}

